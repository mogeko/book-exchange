// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // See: https://vercel.com/docs/storage/vercel-postgres/using-an-orm#prisma
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Auth {
  id        String   @id @default(cuid())
  loginTime DateTime @default(now())
  password  String

  user      User   @relation(fields: [userEmail], references: [email])
  userEmail String @unique
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  name      String?
  avatar    String?

  authentication Auth?
  followings     Somebody[] @relation("FolloweeFollowings")
  followees      Somebody[] @relation("FollowingFollowees")
  books          Owner[]
  commented      Comment[]  @relation("CommentatorCommented")
  commentes      Comment[]
  voted          Voter[]
}

model Somebody {
  followee    User     @relation("FolloweeFollowings", fields: [followeeId], references: [id])
  followeeId  String
  following   User     @relation("FollowingFollowees", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@id([followeeId, followingId])
}

model Voter {
  voter     User     @relation(fields: [voterId], references: [id])
  voterId   String   @map("userId")
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vote      Boolean

  @@id([voterId, commentId])
}

model Owner {
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String
  createdAt DateTime @default(now())

  @@id([ownerId, bookId])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String

  commentator   User    @relation("CommentatorCommented", fields: [commentatorId], references: [id])
  commentatorId String
  votes         Voter[]

  transcript  Transcript?
  user        User?       @relation(fields: [userId], references: [id])
  userId      String?
  publisher   Publisher?  @relation(fields: [publisherId], references: [id])
  publisherId String?
  series      Series?     @relation(fields: [seriesId], references: [id])
  seriesId    String?
  writer      Writer?     @relation(fields: [writerId], references: [id])
  writerId    String?
}

model Transcript {
  score Int

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String  @unique
  book      Book    @relation(fields: [bookId], references: [id])
  bookId    String

  @@id([commentId, bookId])
}

model Writer {
  id   String @id @default(cuid())
  name String

  artworks Author[]
  comments Comment[]
}

model Author {
  writer   Writer @relation(fields: [writerId], references: [id])
  writerId String
  book     Book   @relation(fields: [bookId], references: [id])
  bookId   String

  @@id([writerId, bookId])
}

model Publisher {
  id   String @id @default(cuid())
  name String

  published Book[]
  comments  Comment[]
}

model Series {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique
  discription String?
  cover       String?

  books    Book[]
  comments Comment[]
}

model Book {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  discription String?
  isbn        String?  @unique
  cover       String?

  publisher   Publisher?   @relation(fields: [publisherId], references: [id])
  publisherId String?
  series      Series?      @relation(fields: [seriesId], references: [id])
  seriesId    String?
  owners      Owner[]
  transcripts Transcript[]
  authors     Author[]
}
