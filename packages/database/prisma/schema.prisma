// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // See: https://vercel.com/docs/storage/vercel-postgres/using-an-orm#prisma
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Auth {
  id       Int    @id @default(autoincrement())
  password String

  user      User   @relation(fields: [userEmail], references: [email])
  userEmail String @unique
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  name      String
  avatar    String

  authentication Auth?
  followedBy     User[]     @relation("UserFollows")
  following      User[]     @relation("UserFollows")
  ownedBooks     Book[]
  commentTo      Comment[]  @relation("CommentToX")
  commentes      Comment[]
  voteTo         Voter[]
  booklists      Booklist[]
}

model Booklist {
  id          Int              @id @default(autoincrement())
  status      BooklistStatus   @default(TODO)
  priority    BooklistPriority @default(MEDIUM)
  title       String
  discription String?

  user   User   @relation(fields: [userId], references: [id])
  userId Int
  books  Book[]
}

enum BooklistStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum BooklistPriority {
  HIGH
  MEDIUM
  LOW
}

model Voter {
  voter     User     @relation(fields: [voterId], references: [id])
  voterId   Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vote      Boolean

  @@id([voterId, commentId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String

  commentator   User    @relation("CommentToX", fields: [commentatorId], references: [id])
  commentatorId Int
  votes         Voter[]

  score       Score?
  user        User?      @relation(fields: [userId], references: [id])
  userId      Int?
  publisher   Publisher? @relation(fields: [publisherId], references: [id])
  publisherId Int?
  series      Series?    @relation(fields: [seriesId], references: [id])
  seriesId    Int?
  author      Author?    @relation(fields: [authorId], references: [id])
  authorId    Int?
}

model Score {
  rate Int @db.SmallInt

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int     @unique
  book      Book    @relation(fields: [bookId], references: [id])
  bookId    Int

  @@id([commentId, bookId])
}

model Author {
  id     Int    @id @default(autoincrement())
  avatar String
  name   String

  articles     Book[]    @relation("Write")
  translations Book[]    @relation("Translate")
  comments     Comment[]
}

model Publisher {
  id   Int    @id @default(autoincrement())
  name String

  comments  Comment[]
  published Book[]
  series    Series[]
}

model Series {
  id          Int     @id @default(autoincrement())
  name        String
  discription String?
  cover       String?

  publisher   Publisher? @relation(fields: [publisherId], references: [id])
  publisherId Int?
  books       Book[]
  comments    Comment[]
}

model Book {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  discription String?
  isbn        String?  @unique
  cover       String?

  publisher   Publisher? @relation(fields: [publisherId], references: [id])
  publisherId Int?
  series      Series?    @relation(fields: [seriesId], references: [id])
  seriesId    Int?
  translators Author[]   @relation("Translate")
  authors     Author[]   @relation("Write")
  tags        Tag[]
  booklists   Booklist[]
  scores      Score[]
  owners      User[]
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  books Book[]
}
